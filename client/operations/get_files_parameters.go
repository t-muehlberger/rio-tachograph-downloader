// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetFilesParams creates a new GetFilesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFilesParams() *GetFilesParams {
	return &GetFilesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFilesParamsWithTimeout creates a new GetFilesParams object
// with the ability to set a timeout on a request.
func NewGetFilesParamsWithTimeout(timeout time.Duration) *GetFilesParams {
	return &GetFilesParams{
		timeout: timeout,
	}
}

// NewGetFilesParamsWithContext creates a new GetFilesParams object
// with the ability to set a context for a request.
func NewGetFilesParamsWithContext(ctx context.Context) *GetFilesParams {
	return &GetFilesParams{
		Context: ctx,
	}
}

// NewGetFilesParamsWithHTTPClient creates a new GetFilesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFilesParamsWithHTTPClient(client *http.Client) *GetFilesParams {
	return &GetFilesParams{
		HTTPClient: client,
	}
}

/*
GetFilesParams contains all the parameters to send to the API endpoint

	for the get files operation.

	Typically these are written to a http.Request.
*/
type GetFilesParams struct {

	/* DriverID.

	   Driver identification
	*/
	DriverID *string

	/* EquipmentID.

	   Equipment identification
	*/
	EquipmentID *string

	/* FileType.

	   defines the type of file
	*/
	FileType *string

	/* FleetID.

	   Fleet identification
	*/
	FleetID *string

	/* From.

	   UTC value formatted as date-time (see: RFC 3339, section 5.6). Refering to FileMetadataModel::time_created.

	   Format: date-time
	*/
	From *strfmt.DateTime

	/* Limit.

	   Pagination: number of elements on the page

	   Format: int32
	   Default: 10
	*/
	Limit *int32

	/* Offset.

	   Pagination: number of elements to skip

	   Format: int32
	*/
	Offset *int32

	/* To.

	   UTC value formatted as date-time (see: RFC 3339, section 5.6). Refering to FileMetadataModel::time_created.

	   Format: date-time
	*/
	To *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFilesParams) WithDefaults() *GetFilesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFilesParams) SetDefaults() {
	var (
		limitDefault = int32(10)

		offsetDefault = int32(0)
	)

	val := GetFilesParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get files params
func (o *GetFilesParams) WithTimeout(timeout time.Duration) *GetFilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get files params
func (o *GetFilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get files params
func (o *GetFilesParams) WithContext(ctx context.Context) *GetFilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get files params
func (o *GetFilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get files params
func (o *GetFilesParams) WithHTTPClient(client *http.Client) *GetFilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get files params
func (o *GetFilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDriverID adds the driverID to the get files params
func (o *GetFilesParams) WithDriverID(driverID *string) *GetFilesParams {
	o.SetDriverID(driverID)
	return o
}

// SetDriverID adds the driverId to the get files params
func (o *GetFilesParams) SetDriverID(driverID *string) {
	o.DriverID = driverID
}

// WithEquipmentID adds the equipmentID to the get files params
func (o *GetFilesParams) WithEquipmentID(equipmentID *string) *GetFilesParams {
	o.SetEquipmentID(equipmentID)
	return o
}

// SetEquipmentID adds the equipmentId to the get files params
func (o *GetFilesParams) SetEquipmentID(equipmentID *string) {
	o.EquipmentID = equipmentID
}

// WithFileType adds the fileType to the get files params
func (o *GetFilesParams) WithFileType(fileType *string) *GetFilesParams {
	o.SetFileType(fileType)
	return o
}

// SetFileType adds the fileType to the get files params
func (o *GetFilesParams) SetFileType(fileType *string) {
	o.FileType = fileType
}

// WithFleetID adds the fleetID to the get files params
func (o *GetFilesParams) WithFleetID(fleetID *string) *GetFilesParams {
	o.SetFleetID(fleetID)
	return o
}

// SetFleetID adds the fleetId to the get files params
func (o *GetFilesParams) SetFleetID(fleetID *string) {
	o.FleetID = fleetID
}

// WithFrom adds the from to the get files params
func (o *GetFilesParams) WithFrom(from *strfmt.DateTime) *GetFilesParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get files params
func (o *GetFilesParams) SetFrom(from *strfmt.DateTime) {
	o.From = from
}

// WithLimit adds the limit to the get files params
func (o *GetFilesParams) WithLimit(limit *int32) *GetFilesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get files params
func (o *GetFilesParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the get files params
func (o *GetFilesParams) WithOffset(offset *int32) *GetFilesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get files params
func (o *GetFilesParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithTo adds the to to the get files params
func (o *GetFilesParams) WithTo(to *strfmt.DateTime) *GetFilesParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get files params
func (o *GetFilesParams) SetTo(to *strfmt.DateTime) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *GetFilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DriverID != nil {

		// query param driver_id
		var qrDriverID string

		if o.DriverID != nil {
			qrDriverID = *o.DriverID
		}
		qDriverID := qrDriverID
		if qDriverID != "" {

			if err := r.SetQueryParam("driver_id", qDriverID); err != nil {
				return err
			}
		}
	}

	if o.EquipmentID != nil {

		// query param equipment_id
		var qrEquipmentID string

		if o.EquipmentID != nil {
			qrEquipmentID = *o.EquipmentID
		}
		qEquipmentID := qrEquipmentID
		if qEquipmentID != "" {

			if err := r.SetQueryParam("equipment_id", qEquipmentID); err != nil {
				return err
			}
		}
	}

	if o.FileType != nil {

		// query param file_type
		var qrFileType string

		if o.FileType != nil {
			qrFileType = *o.FileType
		}
		qFileType := qrFileType
		if qFileType != "" {

			if err := r.SetQueryParam("file_type", qFileType); err != nil {
				return err
			}
		}
	}

	if o.FleetID != nil {

		// query param fleet_id
		var qrFleetID string

		if o.FleetID != nil {
			qrFleetID = *o.FleetID
		}
		qFleetID := qrFleetID
		if qFleetID != "" {

			if err := r.SetQueryParam("fleet_id", qFleetID); err != nil {
				return err
			}
		}
	}

	if o.From != nil {

		// query param from
		var qrFrom strfmt.DateTime

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom.String()
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.To != nil {

		// query param to
		var qrTo strfmt.DateTime

		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo.String()
		if qTo != "" {

			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
